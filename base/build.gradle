plugins {
    id 'java-library'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id 'com.adarshr.test-logger' version '3.0.0'
    id 'de.jansauer.printcoverage' version '2.0.0'
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint" version '10.2.1'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
  kotlinOptions {
    jvmTarget = "${target}"
  }
}

dependencies {
    api "com.guardsquare:proguard-core:${proguardCoreVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.json:json:20211205'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation 'com.github.tschuchortdev:kotlin-compile-testing:1.4.7'
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.0.3' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.0.3' // for kotest core jvm assertions
    testImplementation 'io.kotest:kotest-property-jvm:5.0.3' // for kotest property test
    testImplementation "io.mockk:mockk:1.12.1" // for mocking

    // For assembling ProGuard assembler snippets
    testImplementation ('com.github.Guardsquare:proguard-assembler:master-SNAPSHOT') {
        exclude group: 'com.guardsquare', module: 'proguard-core'
    }
}

jar {
    manifest {
        attributes(
                'Multi-Release': true,
                'Implementation-Version': archiveVersion.get())
    }
}

// Early access automatic downloads are not yet supported:
// https://github.com/gradle/gradle/issues/14814
// But it will work if e.g. Java 17-ea is pre-installed
def javaVersionsForTest = 9..17

test {
    useJUnitPlatform()
}

task testAllJavaVersions() { testAllTask ->
    dependsOn(test) // the usual test runs on Java 8

    javaVersionsForTest.each {version ->
        task("testJava$version", type: Test) {
            useJUnitPlatform()
            ignoreFailures = true

            testAllTask.dependsOn(it)

            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(version)
            }
        }
    }
}

jacocoTestReport {
    // Define which classes need to be monitored
    def sources = files(project.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom(sources)
    additionalSourceDirs.setFrom(sources)
    sourceDirectories.setFrom(sources)
    def classes = files(project.sourceSets.main.output.classesDirs)
    classDirectories.setFrom(classes)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

afterEvaluate {
    publishing {
        publications.getByName(project.name) {
            pom {
                description = 'ProGuard is a free shrinker, optimizer, obfuscator, and preverifier for Java bytecode'
            }
        }
    }
}
